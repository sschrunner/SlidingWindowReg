[{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sample experiment using Sliding Window Regression","text":"SlidingWindowReg implements regression model hydrological time series data. particular, multiple time-lagged windows Gaussian kernel shape estimated training data. , extracted feature mapped target time series via multiple linear regression. vignette, sample experiment performed demonstrate model able identify model parameters correctly user-simulated setup.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"data-preparation-experimental-setup","dir":"Articles","previous_headings":"Introduction","what":"Data preparation & experimental setup","title":"Sample experiment using Sliding Window Regression","text":"First, load package sample watershed data: second step, divide dataset () train set containing 30 years (77% time series) (b) test set comprising residual 9 years (23% time series). Note present dataset, years refer hydrological years (October 01 September 30).","code":"library(SlidingWindowReg)  data(\"sampleWatershed\") library(lubridate) # package to handle date formats ##  ## Attaching package: 'lubridate' ## The following objects are masked from 'package:base': ##  ##     date, intersect, setdiff, union hydr_year <- cumsum(format(sampleWatershed$date, \"%d.%m.\") == \"01.10.\") # determine hydrological years (Oct 01 to Sep 30)  train_inds <- which(hydr_year <= 30)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"slidingwindowreg-model","dir":"Articles","previous_headings":"","what":"SlidingWindowReg model","title":"Sample experiment using Sliding Window Regression","text":"Given data splits, train SlidingWindowReg model train set. purpose, following parameters set: iter number iterations (maximum number windows) runs number independent model runs — default, run achieving best performance metric returned param_selection method determine number windows","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"model-training","dir":"Articles","previous_headings":"SlidingWindowReg model","what":"Model training","title":"Sample experiment using Sliding Window Regression","text":"presented example, use 3 iterations (3 windows), determine hyperparameter (number windows \\(k\\)) respect Bayesian Information Criterion (BIC).% , set parallelization procedure FALSE. %## Parallelization %Model parallelization implemented model runs, iterations (incrementally adding windows iterations) run %serial order. Hence, option parallel = FALSE chosen runs = 1. case multiple model runs, %parallel can set either TRUE (case, number available kernels determined automatically), %positive integer number indicating number kernels used.","code":"mod <- trainSWR(sampleWatershed$rain[train_inds],                 sampleWatershed$gauge[train_inds],                 iter = 3,                 param_selection = \"best_bic\") ## Warning: The `parallel` argument of `trainSWR()` is deprecated as of SlidingWindowReg ## 0.1.1. ## ℹ Parallel model runs are not useful with deterministic window initializations. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"evaluation","dir":"Articles","previous_headings":"","what":"Evaluation","title":"Sample experiment using Sliding Window Regression","text":"Tools evaluating model results include summary plot functions model parameters, well metrics plots determine predictive performance test sets.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"model-parameters","dir":"Articles","previous_headings":"Evaluation","what":"Model parameters","title":"Sample experiment using Sliding Window Regression","text":"first overview model results can obtained printing model summary: specific, main model parameters stored : matrix characterizing location size windows (column 1 indicates center points time axis, column 2 indicates variance) vector regression coefficients order visualize estimated windows, kernel plot available SlidingWindowReg:","code":"summary(mod) ## SlidingWindowReg (SWR) model object with k = 3 windows ##  ## | window| delta| sigma| beta| ## |------:|-----:|-----:|----:| ## |      1|  0.25|  2.80| 0.31| ## |      2|  0.54|  0.01| 0.36| ## |      3|  6.17|  5.03| 0.21| # window parameters print(mod$param) ##          delta       sigma ## [1,] 0.2478884 2.802167899 ## [2,] 0.5418713 0.008861073 ## [3,] 6.1718921 5.034399911 # regression parameters print(mod$mix) ## [1] 0.3107634 0.3589877 0.2072376 coef(mod) ##                                                                      ## kernel1 0.00000000 0.000000000 0.0000000000 0.0000000000 0.000000000 ## kernel2 0.00000000 0.000000000 0.0000000000 0.0000000000 0.000000000 ## kernel3 0.00013115 0.000239641 0.0004209921 0.0007110614 0.001154677 ##                                                                                ## kernel1 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 ## kernel2 0.000000000 0.000000000 0.00000000 0.000000000 0.000000000 0.000000000 ## kernel3 0.001802746 0.002706009 0.00390521 0.005418517 0.007228317 0.009270749 ##                                         -9          -8          -7          -6 ## kernel1 0.00000000 0.00000000 0.0005831947 0.001650033 0.004115474 0.009049024 ## kernel2 0.00000000 0.00000000 0.0000000000 0.000000000 0.000000000 0.000000000 ## kernel3 0.01143177 0.01355292 0.0154480433 0.016929147 0.017836832 0.018068473 ##                 -5         -4         -3         -2         -1            0 ## kernel1 0.01754057 0.02997441 0.04515714 0.05997553 0.07022563 7.249238e-02 ## kernel2 0.00000000 0.00000000 0.00000000 0.00000000 0.35898727 4.124231e-07 ## kernel3 0.01759731 0.01647753 0.01483403 0.01283947 0.01068454 8.548422e-03 plot(mod, include_text = FALSE)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"predictive-performance","dir":"Articles","previous_headings":"Evaluation","what":"Predictive performance","title":"Sample experiment using Sliding Window Regression","text":"assess predictive performance, evaluate model test set. purpose, compute root mean squared error (RMSE) evaluation metrics: next step, generate plot demonstrating input time series, predicted output time series, ground truth output. plot demonstrates first 3 last 3 hydrological years (case, years 1-3 7-9 displayed).","code":"pred_on_test <- predict(mod,                          newdata = sampleWatershed$rain[-train_inds])  print(eval_all(pred_on_test,                 sampleWatershed$gauge[-train_inds])) ##       rmse     nrmse        r2       nse       kge ## 1 3.363101 0.8924661 0.7228439 0.7228439 0.7444633 plot(mod,       type = \"prediction\",      reference = sampleWatershed$gauge[-train_inds],      newdata = sampleWatershed$rain[-train_inds])"},{"path":"https://sschrunner.github.io/SlidingWindowReg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Schrunner. Author, maintainer.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schrunner S (2023). SlidingWindowReg: Gaussian Sliding Windows Regression. R package version 0.1.1, https://sschrunner.github.io/SlidingWindowReg/.","code":"@Manual{,   title = {SlidingWindowReg: Gaussian Sliding Windows Regression},   author = {Stefan Schrunner},   year = {2023},   note = {R package version 0.1.1},   url = {https://sschrunner.github.io/SlidingWindowReg/}, }"},{"path":[]},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"a-gaussian-sliding-windows-regression-model","dir":"","previous_headings":"","what":"A Gaussian Sliding Windows Regression Model","title":"Gaussian Sliding Windows Regression","text":"R package presents Sliding Windows Regression model Gaussian kernels hydrological inference, see Schrunner et al. (2023). Given input time series (xt)_t ∈ T (describing rainfall hydrological setting) time-dependent target variable (yt)_t ∈ T describing gauged watershed runoff, model utilizes set k lagged time windows model one water path . instance, surface flow, characterized short time lags, may represented first window, groundwater flow described second window longer time lags. lagged time window W interval time axis bounded time lags smin < smax relative current time point t, W = [t−smax,t−smin]. Instead smin smax, W represented following parameters simplicity: location parameter $$\\delta = \\frac{s_{\\min} + s_{\\max}}{2}$$ indicating window center time axis, .e. distance window center estimated time point time axis, size parameter $$\\sigma = \\lceil \\frac{s_{\\max}-s_{\\min}}{6} \\rceil$$ defining width window. Given window Wi, define Gaussian kernel κ() weight vector approximating shape Gaussian probability density function φ mean μ = δi standard deviation σ. predicted runoff associated window computed convolution input time series (xt)_t ∈ T window kernel κ() weight vector, .e. κ() * xWi, xW = (xt − smax,…,xt − smin) denotes vector lagged observations * denotes convolution operator. Overall, predicted output yt modeled multiple linear regression model $$ y_t = \\sum\\limits_{=1}^{k} \\beta_i \\left(\\kappa^{()} \\ast x_{W_i}\\right) + \\varepsilon_t, $$ εt denotes model error. Due practical considerations, restrict regression parameters β1, …, βk non-negative numbers.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"package-structure","dir":"","previous_headings":"","what":"Package structure","title":"Gaussian Sliding Windows Regression","text":"core functionality package consists functions train predict, perform model fitting forecasting steps, respectively. , functions evaluating plotting model results parameters provided. implementation builds S3 class SWR, implements multiple generic functions, summary, plot, coef, dim, AIC, BIC. , evaluation metrics can computed using eval_all, calls regression performance metrics rmse (root mean square error, RMSE), nrmse (normalized RMSE), r2 (coefficient determination), well hydrological metrics nse (Nash-Sutcliffe efficiency) kge (Kling-Gupta efficientcy). Plots provided kernel vectors κ() via plot_kernel, well predictions using plot_prediction. sample dataset sampleWatershed contained package. data originates real-world watershed Cowichan, British Columbia, Canada contains daily precipitation (input time series), well gauged runoff (output time series). time series cover period 39 hydrological years, starting October 01, 1979.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gaussian Sliding Windows Regression","text":"version R package can installed follows:","code":"remotes::install_github(\"sschrunner/SlidingWindowReg\", build_manual = TRUE, build_vignettes = TRUE)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Gaussian Sliding Windows Regression","text":"R (>= 3.5.0) combinat, dplyr, ggplot2, hydroGOF, knitr, methods, nloptr, parallel, pbapply, rdist, stats, lifecycle","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Gaussian Sliding Windows Regression","text":"use SlidingWindowReg report scientific publication, appreciate citations following preprint: Schrunner, S. et al. (2023). Gaussian Sliding Windows Regression Model Hydrological Inference. arXiv.org (preprint), 2023, https://doi.org/10.48550/arXiv.2306.00453 Bibtex entry:","code":"@misc{schrunner2023gaussian,   title={A Gaussian Sliding Windows Regression Model for Hydrological Inference},    author={Stefan Schrunner and Joseph Janssen and Anna Jenul and Jiguo Cao and Ali A. Ameli and William J. Welch},   year={2023},   howpublished={arXiv.org (preprint)},   eprint={2306.00453},   archivePrefix={arXiv},   primaryClass={stat.ME},   doi={10.48550/arXiv.2306.00453},   url={https://doi.org/10.48550/arXiv.2306.00453}   }"},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Gaussian Sliding Windows Regression","text":"implemented Gaussian Sliding Windows Regression model developed collaboration Norwegian University Life Sciences (NMBU), Ås, Norway, University British Columbia (UBC), Vancouver, Canada, Simon Fraser University (SFU), Burnaby, Canada package currently development. issues, feel free contact Stefan Schrunner.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Criteria — AIC.SWR","title":"Information Criteria — AIC.SWR","text":"Computes Akaike's Information Criterion (AIC) (Akaike 1974)  Bayesian Information Criterion (BIC) (Schwarz 1978) .","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Criteria — AIC.SWR","text":"","code":"# S3 method for SWR AIC(object, ts_input, ts_output, ...)  # S3 method for SWR BIC(object, ts_input, ts_output, ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Criteria — AIC.SWR","text":"object SWR model object created using trainSWR ts_input vector ts object containing input time series ts_output vector ts object (time scale ts_input) containing target time series ... currently unused","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information Criteria — AIC.SWR","text":"AIC BIC value","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Information Criteria — AIC.SWR","text":"AIC(SWR): Akaike's Information Criterion BIC(SWR): Bayesian Information Criterion","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Information Criteria — AIC.SWR","text":"Akaike H (1974). “new look statistical model identification.” IEEE Transactions Automatic Control, 19(6), 716--723. doi:10.1109/tac.1974.1100705 . Schwarz G (1978). “Estimating Dimension Model.” Annals Statistics, 6(2). doi:10.1214/aos/1176344136 .","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/SlidingWindowReg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SlidingWindowReg: Gaussian Sliding Windows Regression — SlidingWindowReg-package","title":"SlidingWindowReg: Gaussian Sliding Windows Regression — SlidingWindowReg-package","text":"Sliding Windows Regression model parameterized Gaussian kernels weights hydrological inference. package currently development.","code":""},{"path":[]},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/SlidingWindowReg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SlidingWindowReg: Gaussian Sliding Windows Regression — SlidingWindowReg-package","text":"Maintainer: Stefan Schrunner stefan.schrunner@nmbu.(ORCID)","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SWR model object — createSWR","title":"Create SWR model object — createSWR","text":"Constructor create SWR model object manually based model parameters","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SWR model object — createSWR","text":"","code":"createSWR(list = NULL, param = NULL, mix = NULL, ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SWR model object — createSWR","text":"list list object converted SWR model object param matrix 2 columns, see details mix vector mixing parameters (beta), see details ... variables appended SWR model object","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create SWR model object — createSWR","text":"SWR model object S3-class object, contains least two variables: matrix param 2 columns representing one window per row. first column contains location parameters delta (>=0), second column contains standard deviation sigma (>0), vector mix regression parameters, representing one window . Thus, number windows given number rows param, well number elements mix. Additional variables can appended SWR model object using ... argument","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute all available model metrics — eval_all","title":"Compute all available model metrics — eval_all","text":"computes evaluation metrics given prediction reference vector. functionality includes general regression metrics hydrological metrics (wrapper (Mauricio Zambrano-Bigiarini 2020) ): Root Mean Square Error (RMSE) Normalized Root Mean Square Error (NRMSE) Coefficient Determination (R2) Nash-Sutcliffe Efficiency (Nash Sutcliffe 1970) Kling-Gupta Efficiency (Gupta et al. 2009)","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute all available model metrics — eval_all","text":"","code":"eval_all(prediction, reference)  rmse(prediction, reference)  nrmse(prediction, reference)  r2(prediction, reference)  nse(prediction, reference)  kge(prediction, reference)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute all available model metrics — eval_all","text":"prediction vector ts object predicted values reference vector ts object (time scale prediction) containing ground truth values","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compute all available model metrics — eval_all","text":"rmse(): Root Mean Squared Error nrmse(): Normalized Root Mean Squared Error r2(): Coefficient Determination nse(): Nash-Sutcliffe Efficiency kge(): Kling-Gupta Efficiency","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute all available model metrics — eval_all","text":"Gupta HV, Kling H, Yilmaz KK, Martinez GF (2009). “Decomposition mean squared error NSE performance criteria: Implications improving hydrological modelling.” Journal Hydrology, 377(1-2), 80--91. doi:10.1016/j.jhydrol.2009.08.003 . Mauricio Zambrano-Bigiarini (2020). hydroGOF: Goodness--fit functions comparison simulated observed hydrological time series. doi:10.5281/zenodo.839854 , R package version 0.4-0, https://github.com/hzambran/hydroGOF. Nash JE, Sutcliffe JV (1970). “River flow forecasting conceptual models part — discussion principles.” Journal Hydrology, 10(3), 282--290. doi:10.1016/0022-1694(70)90255-6 .","code":""},{"path":[]},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Return and plot accumulated kernel — get_kernel","title":"Return and plot accumulated kernel — get_kernel","text":"Return plot accumulated kernel, consisting one multiple windows","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return and plot accumulated kernel — get_kernel","text":"","code":"get_kernel(param, mix = NULL, kernel_type = \"single\", weighted = TRUE)  # S3 method for SWR coef(object, ...)  plot_kernel(   list = NULL,   param = NULL,   mix = NULL,   kernel_type = \"single\",   weighted = TRUE,   xlim = NULL,   include_text = TRUE,   scales = \"fixed\" )  # S3 method for SWR plot(x, type = \"kernel\", ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return and plot accumulated kernel — get_kernel","text":"param matrix 2 columns, see details mix vector mixing parameters (beta), see details kernel_type String indicating whether () single windows (option: \"single\"), (b) combined kernel (option \"combined\") weighted TRUE, windows weighted mix parameters; default: TRUE object SWR model object created using trainSWR ... plotting parameters, see  plot_kernel plot_prediction, respectively list list containing multiple trained SlidingWindowReg models xlim vector lower / upper bound x axis print kernel include_text TRUE, plots annotated scales whether scales shared across multiple sub-plots (\"fixed\"), free (\"free\") x SWR model object type either \"kernel\" produce plot window kernels, \"prediction\" plot model predictions, see plot_prediction","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Return and plot accumulated kernel — get_kernel","text":"get_kernel(): return kernel SWR model coef(SWR): return kernel SWR model plot_kernel(): plot kernel SWR model plot(SWR): plot kernel SWR model","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return and plot accumulated kernel — get_kernel","text":"","code":"param <- cbind(   delta = c(0, 10),   sigma = c(2, 3)) mix <- rep(1, ncol(param)) mod <- createSWR(param = param, mix = mix)  get_kernel(param = param, mix = mix) #>                                                                              #> kernel1 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.00000000 #> kernel2 0.001534648 0.003912432 0.008934251 0.01827455 0.03348232 0.05495003 #>                                                                                 #> kernel1 0.00000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 #> kernel2 0.08078044 0.1063732 0.1254721 0.1325721 0.1254721 0.1063732 0.08078044 #>                  -6         -5         -4          -3          -2          -1 #> kernel1 0.004017088 0.01545604 0.04653623 0.109659595 0.202259910 0.292021009 #> kernel2 0.054950035 0.03348232 0.01827455 0.008934251 0.003912432 0.001534648 #>                 0 #> kernel1 0.3300501 #> kernel2 0.0000000 coef(mod) #>                                                                              #> kernel1 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.00000000 #> kernel2 0.001534648 0.003912432 0.008934251 0.01827455 0.03348232 0.05495003 #>                                                                                 #> kernel1 0.00000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 #> kernel2 0.08078044 0.1063732 0.1254721 0.1325721 0.1254721 0.1063732 0.08078044 #>                  -6         -5         -4          -3          -2          -1 #> kernel1 0.004017088 0.01545604 0.04653623 0.109659595 0.202259910 0.292021009 #> kernel2 0.054950035 0.03348232 0.01827455 0.008934251 0.003912432 0.001534648 #>                 0 #> kernel1 0.3300501 #> kernel2 0.0000000  plot_kernel(param = param, mix = mix)  plot(mod, type = \"kernel\")"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel overlap — window_overlap","title":"Kernel overlap — window_overlap","text":"Computes kernel overlap evaluation metric predicted kernel ground truth kernel","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel overlap — window_overlap","text":"","code":"window_overlap(param_prediction, param_reference)  overlap(   param_prediction,   param_reference,   mix_prediction = NULL,   mix_reference = NULL )"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel overlap — window_overlap","text":"param_prediction predicted window parameter matrix (2 columns) param_reference ground truth window parameter matrix (2 columns) mix_prediction vector predicted regression parameters mix_reference vector ground truth regression parameters","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel overlap — window_overlap","text":"vector overlap values ground truth window scalar indicating overlap predicted ground truth kernel. Value 0 (minimum overlap) 1 (complete overlap).","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kernel overlap — window_overlap","text":"window_overlap(): Computes kernel overlap predicted window ground truth window separately","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot prediction — plot_prediction","title":"Plot prediction — plot_prediction","text":"plot prediction reference","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot prediction — plot_prediction","text":"","code":"plot_prediction(   prediction,   reference,   ts_input = NULL,   scale = \"year\",   years = NULL,   ... )"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot prediction — plot_prediction","text":"prediction vector ts object predicted values reference vector ts object (time scale prediction) containing ground truth values ts_input vector ts object containing input time series scale String indicating scale used plotting; options \"year\", \"month\" \"week\"; default \"year\" years vector years included plot; NULL, first 3 last 3 years used ... currently unused","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot prediction — plot_prediction","text":"","code":"param <- cbind(   delta = c(0, 10),   sigma = c(2, 3)) mix <- rep(1, ncol(param)) mod <- createSWR(param = param, mix = mix) pred <- predict(mod, newdata = sampleWatershed$rain)  plot_prediction(pred,                 prediction = sampleWatershed$gauge,                 reference = sampleWatershed$rain)  plot(mod,      type = \"prediction\",      newdata = sampleWatershed$rain,      reference = sampleWatershed$gauge)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/predict.SWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict target variable — predict.SWR","title":"Predict target variable — predict.SWR","text":"Predicts output time series given input time series using trained SWR model object.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/predict.SWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict target variable — predict.SWR","text":"","code":"# S3 method for SWR predict(object, newdata, ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/predict.SWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict target variable — predict.SWR","text":"object SWR model object created using trainSWR newdata vector ts object new model inputs predict ... currently unused","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample watershed — sampleWatershed","title":"Sample watershed — sampleWatershed","text":"dataset containing time series daily rainfall measured water runoff gauged watershed 39 years","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample watershed — sampleWatershed","text":"","code":"sampleWatershed"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample watershed — sampleWatershed","text":"data frame 14245 rows 3 columns: date date variable (daily measurements) October 01, 1979 September 30, 2018 rain daily cumulated rainfall gauge daily cumulated, gauged watershed runoff","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample watershed — sampleWatershed","text":"processed HydroGeoScience Watershed Management Research group University British Columbia, Vancouver, Canada","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an SWR model — summary.SWR","title":"Summarizes an SWR model — summary.SWR","text":"summary SWR model","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an SWR model — summary.SWR","text":"","code":"# S3 method for SWR summary(object, ...)  # S3 method for SWR dim(x)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an SWR model — summary.SWR","text":"object SWR model object created using trainSWR ... currently unused x SWR model object created using trainSWR","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarizes an SWR model — summary.SWR","text":"summary(SWR): Summarizes SWR model dim(SWR): Returns number windows SWR model","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Train model — trainSWR","title":"Train model — trainSWR","text":"Trains SWR model based input target time series data.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train model — trainSWR","text":"","code":"trainSWR(   ts_input,   ts_output,   iter = 5,   runs,   log = FALSE,   parallel,   return = \"best\",   param_selection = \"best_rmse\" )"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train model — trainSWR","text":"ts_input vector ts object containing input time series ts_output vector ts object (time scale ts_input) containing target time series iter number iterations (maximum number windows) runs number independent model runs; longer supported due deterministic window initialization log whether log-linear model used parallel runs computed parallel? FALSE, runs computed serial. TRUE, runs computed parallel maximum number cores. scalar provided, number cores set manually. longer supported single-run models return either \"best\" (best model run returned), \"\" (model runs returned) param_selection either \"max\" (maximum number windows), \"best_rmse\", \"best_aic\", \"best_bic\" optimize RMSE, AIC, BIC, respectively","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train model — trainSWR","text":"training procedure implements iterative algorithm described (Schrunner et al. 2023) . new window added iteration, hence number windows equals iteration counter. Input output time series provided ts_input ts_output, respectively. required equal lengths. optimization performed using BOBYQA algorithm (Powell 2009) , implemented nloptr (Johnson 2021) . training hyperparameter, iter indicates number iterations, equals maximum number windows selected model. Parameters return param_selection indicate criterion used determine number windows; option : return=\"\" (hyperparameter selection) return=\"best\", allows one following options: param_selection=\"best_aic\": select model highest AIC, param_selection=\"best_bic\": select model highest BIC, param_selection=\"best_rmse\": select model lowest RMSE. Arguments runs, parallel deprecated used.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Train model — trainSWR","text":"Johnson SG (2021). NLopt nonlinear-optimization package. v2.7.1, http://github.com/stevengj/nlopt. Powell MJ (2009). “BOBYQA algorithm bound constrained optimization without derivatives.” Cambridge NA Report NA2009/06, University Cambridge, Cambridge, 26. Schrunner S, Janssen J, Jenul , Cao J, Ameli AA, Welch WJ (2023). “Gaussian Sliding Windows Regression Model Hydrological Inference.” arXiv.org (preprint). 2306.00453.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train model — trainSWR","text":"","code":"# train a model based on one year of observations set.seed(42) data(sampleWatershed) mod <- trainSWR(sampleWatershed$rain[1:365],                 sampleWatershed$gauge[1:365],                 iter = 2) #> Warning: The `parallel` argument of `trainSWR()` is deprecated as of SlidingWindowReg #> 0.1.1. #> ℹ Parallel model runs are not useful with deterministic window initializations. summary(mod) #> SlidingWindowReg (SWR) model object with k = 2 windows #>  #> | window| delta| sigma| beta| #> |------:|-----:|-----:|----:| #> |      1|  0.73|  0.11| 0.44| #> |      2|  1.77|  1.96| 0.46| #>"}]
