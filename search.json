[{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sample experiment using Sliding Window Regression","text":"SlidingWindowReg implements regression model hydrological time series data. particular, multiple time-lagged windows Gaussian kernel shape estimated training data. , extracted feature mapped target time series via multiple linear regression. vignette, sample experiment performed demonstrate model able identify model parameters correctly user-simulated setup.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"data-preparation-experimental-setup","dir":"Articles","previous_headings":"Introduction","what":"Data preparation & experimental setup","title":"Sample experiment using Sliding Window Regression","text":"First, load package sample watershed data: second step, divide dataset () train set containing 30 years (77% time series) (b) test set comprising residual 9 years (23% time series). Note present dataset, years refer hydrological years (October 01 September 30).","code":"library(SlidingWindowReg)  data(\"sampleWatershed\") library(lubridate) # package to handle date formats ##  ## Attaching package: 'lubridate' ## The following objects are masked from 'package:base': ##  ##     date, intersect, setdiff, union hydr_year <- cumsum(format(sampleWatershed$date, \"%d.%m.\") == \"01.10.\") # determine hydrological years (Oct 01 to Sep 30)  train_inds <- which(hydr_year <= 30)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"slidingwindowreg-model","dir":"Articles","previous_headings":"","what":"SlidingWindowReg model","title":"Sample experiment using Sliding Window Regression","text":"Given data splits, train SlidingWindowReg model train set. purpose, following parameters set: iter number iterations (maximum number windows) runs number independent model runs — default, run achieving best performance metric returned param_selection method determine number windows","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"model-training","dir":"Articles","previous_headings":"SlidingWindowReg model","what":"Model training","title":"Sample experiment using Sliding Window Regression","text":"presented example, use 3 iterations (3 windows), 1 run, determine hyperparameter (number windows \\(k\\)) respect Bayesian Information Criterion (BIC). , set parallelization procedure FALSE.","code":"mod <- trainSWR(sampleWatershed$rain[train_inds],                 sampleWatershed$gauge[train_inds],                 iter = 3,                 runs = 1,                 parallel = FALSE,                 param_selection = \"best_bic\")"},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"parallelization","dir":"Articles","previous_headings":"SlidingWindowReg model","what":"Parallelization","title":"Sample experiment using Sliding Window Regression","text":"Model parallelization implemented model runs, iterations (incrementally adding windows iterations) run serial order. Hence, option parallel = FALSE chosen runs = 1. case multiple model runs, parallel can set either TRUE (case, number available kernels determined automatically), positive integer number indicating number kernels used.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"evaluation","dir":"Articles","previous_headings":"","what":"Evaluation","title":"Sample experiment using Sliding Window Regression","text":"Tools evaluating model results include summary plot functions model parameters, well metrics plots determine predictive performance test sets.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"model-parameters","dir":"Articles","previous_headings":"Evaluation","what":"Model parameters","title":"Sample experiment using Sliding Window Regression","text":"first overview model results can obtained printing model summary: specific, main model parameters stored : matrix characterizing location size windows (column 1 indicates center points time axis, column 2 indicates variance) vector regression coefficients order visualize estimated windows, kernel plot available SlidingWindowReg:","code":"summary(mod) ## SlidingWindowReg (SWR) model object with k = 2 windows ##  ## | window| delta| sigma| beta| ## |------:|-----:|-----:|----:| ## |      1|  1.10|  0.44| 0.58| ## |      2|  4.58|  2.15| 0.27| # window parameters print(mod$param) ##         delta     sigma ## [1,] 1.095611 0.4390086 ## [2,] 4.580567 2.1544406 # regression parameters print(mod$mix) ## [1] 0.5787340 0.2730721 coef(mod) ##                  -12          -11         -10          -9      -8         -7 ## kernel1 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000 0.00000000 ## kernel2 0.0001491798 0.0006456424 0.002260631 0.006404171 0.01468 0.02722997 ##                 -6         -5        -4          -3         -2         -1 ## kernel1 0.00000000 0.00000000 0.0000000 0.000399093 0.10291243 0.42489408 ## kernel2 0.04087408 0.04965271 0.0488134 0.038836099 0.02500486 0.01302837 ##                   0 ## kernel1 0.050528357 ## kernel2 0.005492999 plot(mod, include_text = FALSE)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/articles/sampleExperiment.html","id":"predictive-performance","dir":"Articles","previous_headings":"Evaluation","what":"Predictive performance","title":"Sample experiment using Sliding Window Regression","text":"assess predictive performance, evaluate model test set. purpose, compute root mean squared error (RMSE) evaluation metrics: next step, generate plot demonstrating input time series, predicted output time series, ground truth output. plot demonstrates first 3 last 3 hydrological years (case, years 1-3 7-9 displayed).","code":"pred_on_test <- predict(mod,                          newdata = sampleWatershed$rain[-train_inds])  print(eval_all(pred_on_test,                 sampleWatershed$gauge[-train_inds])) ##       rmse     nrmse        r2       nse       kge ## 1 3.391765 0.9000727 0.7180993 0.7180993 0.7687385 plot(mod,       type = \"prediction\",      reference = sampleWatershed$gauge[-train_inds],      newdata = sampleWatershed$rain[-train_inds])"},{"path":"https://sschrunner.github.io/SlidingWindowReg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Schrunner. Author, maintainer.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schrunner S (2023). SlidingWindowReg: Sliding Multi-Window Regression. R package version 0.1.0, https://sschrunner.github.io/SlidingWindowReg/.","code":"@Manual{,   title = {SlidingWindowReg: Sliding Multi-Window Regression},   author = {Stefan Schrunner},   year = {2023},   note = {R package version 0.1.0},   url = {https://sschrunner.github.io/SlidingWindowReg/}, }"},{"path":[]},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"a-sliding-multi-window-regression-model","dir":"","previous_headings":"","what":"A Sliding Multi-Window Regression Model","title":"Sliding Multi-Window Regression","text":"R package presents Sliding Multi-Window Regression model hydrological inference. Given input time series xt (describing rainfall hydrological setting) time-dependent target variable yt describing gauged watershed runoff, model based set k lagged window kernels modeling one component overall water runoff . instance, surface flow, characterized short time lags, may represented window 1, groundwater flow described second window longer time lag. window  ∈ {1, …, k} characterized * location parameter δi indicating time lag, .e. distance window center estimated time point time axis, * size parameter σi defining width li window. predicted runoff associated window computed rolling average input time series xt window kernel parameters κi weights, .e. κiTxSi, Si = {t − δi − li, …, t − δi + li} set time lags δi − li δi + li, xSi = (xt − 1,…,xt − l) denotes vector lagged observations. predicted output yt modeled multiple linear regression model yt = β1(κ1Txt) + β2(κ2Txt) + … + βk(κkTxt) + εt, εt denotes model error.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"package-structure","dir":"","previous_headings":"","what":"Package structure","title":"Sliding Multi-Window Regression","text":"core functionality package consists train predict function, respectively. , functions evaluating plotting model results parameters provided.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sliding Multi-Window Regression","text":"version R package can installed follows:","code":"remotes::install_github(\"sschrunner/SlidingWindowReg\", build_manual = TRUE, build_vignettes = TRUE)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Sliding Multi-Window Regression","text":"R (>= 3.5.0) combinat, dplyr, ggplot2, hydroGOF, knitr, methods, nloptr, parallel, pbapply, rdist, stats","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Sliding Multi-Window Regression","text":"implemented method developed collaboration Norwegian University Life Sciences (NMBU), Ås, Norway, University British Columbia (UBC), Vancouver, Canada, Simon Fraser University (SFU), Burnaby, Canada package currently development. issues, feel free contact Stefan Schrunner.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Criteria — AIC.SWR","title":"Information Criteria — AIC.SWR","text":"Computes Akaike's Information Criterion (AIC) Bayesian Information Criterion (BIC).","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Criteria — AIC.SWR","text":"","code":"# S3 method for SWR AIC(object, ts_input, ts_output, ...)  # S3 method for SWR BIC(object, ts_input, ts_output, ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Criteria — AIC.SWR","text":"object `SWR` model object created using trainSWR ts_input vector ts object containing input time series ts_output vector ts object (time scale ts_input) containing target time series ... currently unused","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information Criteria — AIC.SWR","text":"AIC BIC value","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/AIC.SWR.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Information Criteria — AIC.SWR","text":"AIC(SWR): Akaike's Information Criterion BIC(SWR): Bayesian Information Criterion","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create `SWR` model object — createSWR","title":"Create `SWR` model object — createSWR","text":"Constructor create `SWR` model object manually based model parameters","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create `SWR` model object — createSWR","text":"","code":"createSWR(param, mix)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/createSWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create `SWR` model object — createSWR","text":"param matrix 2 columns representing one window per row. first column contains location parameters delta, second column contains standard deviation sigma. mix vector mixing parameters (beta)","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute all available model metrics — eval_all","title":"Compute all available model metrics — eval_all","text":"computes evaluation metrics given prediction reference vector","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute all available model metrics — eval_all","text":"","code":"eval_all(prediction, reference)  rmse(prediction, reference)  nrmse(prediction, reference)  r2(prediction, reference)  nse(prediction, reference)  kge(prediction, reference)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute all available model metrics — eval_all","text":"prediction vector ts object predicted values reference vector ts object (time scale prediction) containing ground truth values","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/eval_all.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compute all available model metrics — eval_all","text":"rmse(): Root Mean Squared Error nrmse(): Normalized Root Mean Squared Error r2(): Coefficient Determination nse(): Nash-Sutcliffe Efficiency kge(): Kling-Gupta Efficiency","code":""},{"path":[]},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Return and plot accumulated kernel — get_kernel","title":"Return and plot accumulated kernel — get_kernel","text":"Return plot accumulated kernel, consisting one multiple windows","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return and plot accumulated kernel — get_kernel","text":"","code":"get_kernel(param, mix = NULL, kernel_type = \"single\", weighted = TRUE)  # S3 method for SWR coef(object, ...)  plot_kernel(   list = NULL,   param = NULL,   mix = NULL,   kernel_type = \"single\",   weighted = TRUE,   xlim = NULL,   include_text = TRUE )  # S3 method for SWR plot(x, type = \"kernel\", ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return and plot accumulated kernel — get_kernel","text":"param matrix 2 columns representing one window per row. first column contains location parameters delta, second column contains standard deviation sigma. mix vector mixing parameters (beta) kernel_type String indicating whether () single windows (option: \"single\"), (b) combined kernel (option \"combined\") weighted TRUE, windows weighted mix parameters; default: TRUE object `SWR` model object created using trainSWR ... plotting parameters, see  plot_kernel plot_prediction, respectively list list containing multiple trained SlidingWindowReg models xlim vector lower / upper bound x axis print kernel include_text TRUE, plots annotated x `SWR` model object type either \"kernel\" produce plot window kernels, \"prediction\" plot model predictions, see plot_prediction","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Return and plot accumulated kernel — get_kernel","text":"get_kernel(): return kernel `SWR` model coef(SWR): return kernel `SWR` model plot_kernel(): plot kernel `SWR` model plot(SWR): plot kernel `SWR` model","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/get_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return and plot accumulated kernel — get_kernel","text":"","code":"param <- cbind(   delta = c(0, 10),   sigma = c(2, 3)) mix <- rep(1, ncol(param)) mod <- createSWR(param = param, mix = mix)  get_kernel(param = param, mix = mix) #>                 -19         -18         -17        -16        -15        -14 #> kernel1 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.00000000 #> kernel2 0.001534648 0.003912432 0.008934251 0.01827455 0.03348232 0.05495003 #>                -13       -12       -11       -10        -9        -8         -7 #> kernel1 0.00000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 #> kernel2 0.08078044 0.1063732 0.1254721 0.1325721 0.1254721 0.1063732 0.08078044 #>                  -6         -5         -4          -3          -2          -1 #> kernel1 0.004017088 0.01545604 0.04653623 0.109659595 0.202259910 0.292021009 #> kernel2 0.054950035 0.03348232 0.01827455 0.008934251 0.003912432 0.001534648 #>                 0 #> kernel1 0.3300501 #> kernel2 0.0000000 coef(mod) #>                 -19         -18         -17        -16        -15        -14 #> kernel1 0.000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.00000000 #> kernel2 0.001534648 0.003912432 0.008934251 0.01827455 0.03348232 0.05495003 #>                -13       -12       -11       -10        -9        -8         -7 #> kernel1 0.00000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 #> kernel2 0.08078044 0.1063732 0.1254721 0.1325721 0.1254721 0.1063732 0.08078044 #>                  -6         -5         -4          -3          -2          -1 #> kernel1 0.004017088 0.01545604 0.04653623 0.109659595 0.202259910 0.292021009 #> kernel2 0.054950035 0.03348232 0.01827455 0.008934251 0.003912432 0.001534648 #>                 0 #> kernel1 0.3300501 #> kernel2 0.0000000  plot_kernel(param = param, mix = mix)  plot(mod)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel overlap — window_overlap","title":"Kernel overlap — window_overlap","text":"Computes kernel overlap evaluation metric predicted kernel ground truth kernel","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel overlap — window_overlap","text":"","code":"window_overlap(param_prediction, param_reference)  overlap(   param_prediction,   param_reference,   mix_prediction = NULL,   mix_reference = NULL )"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel overlap — window_overlap","text":"param_prediction predicted window parameter matrix (2 columns) param_reference ground truth window parameter matrix (2 columns) mix_prediction vector predicted regression parameters mix_reference vector ground truth regression parameters","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel overlap — window_overlap","text":"vector overlap values ground truth window scalar indicating overlap predicted ground truth kernel. Value 0 (minimum overlap) 1 (complete overlap).","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/overlap.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Kernel overlap — window_overlap","text":"window_overlap(): Computes kernel overlap predicted window ground truth window separately","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot prediction — plot_prediction","title":"Plot prediction — plot_prediction","text":"plot prediction reference","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot prediction — plot_prediction","text":"","code":"plot_prediction(   prediction,   reference,   ts_input = NULL,   scale = \"year\",   years = NULL,   ... )"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot prediction — plot_prediction","text":"prediction vector ts object predicted values reference vector ts object (time scale prediction) containing ground truth values ts_input vector ts object containing input time series scale String indicating scale used plotting; options \"year\", \"month\" \"week\"; default \"year\" years vector years included plot; NULL, first 3 last 3 years used ... currently unused","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/plot_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot prediction — plot_prediction","text":"","code":"param <- cbind(   delta = c(0, 10),   sigma = c(2, 3)) mix <- rep(1, ncol(param)) mod <- createSWR(param = param, mix = mix) pred <- predict(mod, newdata = sampleWatershed$rain)  plot_prediction(pred,                 prediction = sampleWatershed$gauge,                 reference = sampleWatershed$rain)  plot(mod,      type = \"prediction\",      newdata = sampleWatershed$rain,      reference = sampleWatershed$gauge)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/predict.SWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict target variable — predict.SWR","title":"Predict target variable — predict.SWR","text":"predicts target variable given time series inputs, trained parameters","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/predict.SWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict target variable — predict.SWR","text":"","code":"# S3 method for SWR predict(object, newdata, ...)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/predict.SWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict target variable — predict.SWR","text":"object `SWR` model object created using trainSWR newdata vector ts object new model inputs predict ... currently unused","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample watershed — sampleWatershed","title":"Sample watershed — sampleWatershed","text":"dataset containing time series daily rainfall measured water runoff gauged watershed 39 years","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample watershed — sampleWatershed","text":"","code":"sampleWatershed"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample watershed — sampleWatershed","text":"data frame 14245 rows 3 columns: date date variable (daily measurements) October 01, 1979 September 30, 2018 rain daily cumulated rainfall gauge daily cumulated, gauged watershed runoff","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/sampleWatershed.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample watershed — sampleWatershed","text":"processed HydroGeoScience Watershed Management Research group University British Columbia, Vancouver, Canada","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizes an `SWR` model — summary.SWR","title":"Summarizes an `SWR` model — summary.SWR","text":"summary `SWR` model","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizes an `SWR` model — summary.SWR","text":"","code":"# S3 method for SWR summary(object, ...)  # S3 method for SWR dim(x)"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizes an `SWR` model — summary.SWR","text":"object `SWR` model object created using trainSWR ... currently unused x `SWR` model object created using trainSWR","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/summary.SWR.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarizes an `SWR` model — summary.SWR","text":"summary(SWR): Summarizes `SWR` model dim(SWR): Returns number windows `SWR` model","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":null,"dir":"Reference","previous_headings":"","what":"Train model — trainSWR","title":"Train model — trainSWR","text":"Trains `SWR` model based input target time series data.","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train model — trainSWR","text":"","code":"trainSWR(   ts_input,   ts_output,   iter = 10,   runs = 10,   log = FALSE,   parallel = TRUE,   return = \"best\",   param_selection = \"best_rmse\" )"},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train model — trainSWR","text":"ts_input vector ts object containing input time series ts_output vector ts object (time scale ts_input) containing target time series iter number iterations (maximum number windows) runs number independent model runs log whether log-linear model used parallel runs computed parallel? FALSE, runs computed serial. TRUE, runs computed parallel maximum number cores. scalar provided, number cores set manually. return either \"best\" (best model run returned), \"\" (model runs returned) param_selection either \"max\" (maximum number windows), \"best_rmse\", \"best_aic\", \"best_bic\" optimize RMSE, AIC, BIC, respectively","code":""},{"path":"https://sschrunner.github.io/SlidingWindowReg/reference/trainSWR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train model — trainSWR","text":"","code":"# train a model based on one year of observations set.seed(42) data(sampleWatershed) mod <- trainSWR(sampleWatershed$rain[1:365],                 sampleWatershed$gauge[1:365],                 iter = 2,                 runs = 1,                 parallel = FALSE) summary(mod) #> SlidingWindowReg (SWR) model object with k = 1 windows #>  #> |      | window| delta| sigma| beta| #> |:-----|------:|-----:|-----:|----:| #> |delta |      1|  0.92|  0.48| 0.81| #>"}]
