% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train.R
\name{trainSWR}
\alias{trainSWR}
\title{Train model}
\usage{
trainSWR(
  ts_input,
  ts_output,
  iter = 5,
  runs,
  log = FALSE,
  parallel,
  return = "best",
  param_selection = "best_bic",
  algorithm = "GENOUD"
)
}
\arguments{
\item{ts_input}{a vector or ts object containing the input time series}

\item{ts_output}{a vector or ts object (on the same time scale as ts_input) containing the target time series}

\item{iter}{number of iterations (maximum number of windows)}

\item{runs}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} number of independent model runs; no longer supported due to deterministic window initialization}

\item{log}{whether a log-linear model should be used}

\item{parallel}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} should the runs be computed in parallel? If FALSE, all runs are computed in serial. If TRUE, all runs are computed in parallel with a maximum number of cores. If a scalar is provided, the number of cores is set manually. No longer supported for single-run models}

\item{return}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} either "best" (best model run is returned), or "all" (all model runs are returned)}

\item{param_selection}{either "max" (maximum number of windows), or "best_rmse", "best_aic", or "best_bic" to optimize RMSE, AIC, or BIC, respectively}

\item{algorithm}{either "GENOUD" (genetic optimization using derivatives), or "BOBYQA" (bound optimization by quadratic approximation)}
}
\value{
an object of type \code{SWR} model
}
\description{
Trains an \code{SWR} model based on input and target time series data.
}
\details{
The training procedure implements an iterative algorithm described in \insertCite{schrunner2023gaussian}{SlidingWindowReg}. A new window is added in each iteration, hence the number of windows equals to the iteration counter.
Input and output time series are provided in \code{ts_input} and \code{ts_output}, respectively. Both are required to have equal lengths.
The optimization is performed using the GENOUD algorithm \insertCite{mebanesekhon2011genoud}{SlidingWindowReg}, implemented in \code{rgenoud} \insertCite{rgenoud}{SlidingWindowReg}, or alternatively using the BOBYQA algorithm \insertCite{powell2009bobyqa}{SlidingWindowReg}, implemented in \code{nloptr} \insertCite{nloptr}{SlidingWindowReg}.
As training hyperparameter, \code{iter} indicates the number of iterations, which equals to the maximum number of windows selected by the model.
Parameters \code{return} and \code{param_selection} indicate which criterion should be used to determine the number of windows; option are: \code{return="all"} (no hyperparameter selection) or \code{return="best"}, which allows one of the following options:
\itemize{
\item \code{param_selection="best_aic"}: select model with lowest AIC,
\item \code{param_selection="best_bic"}: select model with lowest BIC,
\item \code{param_selection="best_rmse"}: select model with lowest RMSE.
Arguments \code{runs}, \code{parallel} are deprecated and should not be used.
}
}
\examples{
# load the sample dataset and train a model based on one year of observations
set.seed(42)
data(sampleWatershed)
mod <- trainSWR(sampleWatershed$rain[1:365],
                sampleWatershed$gauge[1:365],
                iter = 2)
summary(mod)
}
\references{
\insertAllCited{}
}
